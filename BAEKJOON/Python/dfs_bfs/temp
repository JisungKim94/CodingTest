#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

int distance(const vector<int>& monkey1, const vector<int>& monkey2, int ground) {
    return abs(monkey1[1] - ground) + abs(monkey2[1] - ground) + abs(monkey1[0] - monkey2[0]);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int N;
    cin >> N;
    vector<vector<int>> monkeys(N, vector<int>(2));

    for (int i = 0; i < N; ++i) {
        cin >> monkeys[i][0] >> monkeys[i][1];
    }

    int ground = (monkeys[0][1] + monkeys[N - 1][1]) / 2;

    while (true) {
        int maxdist = 0;
        pair<int, int> heights;

        for (int i = 0; i < N; ++i) {
            for (int j = i + 1; j < N; ++j) {
                int curdist = distance(monkeys[i], monkeys[j], ground);
                if (maxdist < curdist) {
                    maxdist = curdist;
                    heights = make_pair(monkeys[i][1], monkeys[j][1]);
                }
            }
        }

        if (min(heights.first, heights.second) <= ground && ground <= max(heights.first, heights.second)) {
            break;
        } else if (ground < min(heights.first, heights.second)) {
            ground = (min(heights.first, heights.second) + ground) / 2 + 1;
        } else if (ground > max(heights.first, heights.second)) {
            ground = (max(heights.first, heights.second) + ground) / 2 - 1;
        }
    }

    cout << maxdist << endl;

    return 0;
}
