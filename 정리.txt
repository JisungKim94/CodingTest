# 135807 숫자 카드 나누기 math.gcd, functools.reduce
# keyword
철수가 가진 카드들에 적힌 모든 숫자를 나눌 수 있고 
영희가 가진 카드들에 적힌 모든 숫자들 중 하나도 나눌 수 없는 양의 정수 a

# description
# a = 철수가 가진카드들의 최대공약수
gcd는 일반적으로 gcd(1,2,3) 꼴로 쓰는데 list 쓰려면 gcd(*[1,2,3]) 혹은 reduce 써야 함
tmp_answer1 = reduce(math.gcd, arrayA)
# a = 위에서 구한 값 중 최대값이 영희가 카드로 나눌 수 있는지만 보면 된다. 
이때 큰 값 부터 보는게 효율적
tmp_answer1 = isnotdev(tmp_answer1, arrayB)

# comment
asterisk와 reduce
As of python 3.9 컨테이너 타입의 데이터를 Unpacking 할 때 asterisk(*)를 사용한다.
gcd, lcm의 경우 아래와 같이 사용해야만 list 타입을 받을 수 있다.
list없이 사용 하려면 math.gcd(1,2,3) list로 사용 하려면 math.gcd(*[1,2,3])
그게 아니라면(python 3.9 이하라면) reduce를 사용해야 한다. 
"tmp_answer1 = math.gcd(*arrayA)" == "tmp_answer1 = reduce(math.gcd, arrayA)"
https://codechacha.com/ko/python-reduce/

# ======================================================================================== #

# 12904 가장 긴 팰린드롬 two pointer, [::-1]
# keyword 
팰린드롬

# description
arr_rev = arr[::-1]
l, r로 two pointer 사용하고 조건을 만족할 때 temp_r을 저장한 상태로 끝까지 탐색 해 봐야함

# comment
제일 빠른 답은 아니지만 쓸만 하긴 함

# ======================================================================================== #

# 43238 입국심사 binary search
# keyword
입국심사, 이분탐색 문제

# description
이분탐색이지만 떠올리기 어려운 이유가
일반적인 상식과 달리 미리 시간을 정하고 그걸 만족하는 사람 수를 확인해야 하기 때문
1) 초기화 : start = 1, end = max(times), mid = 0
2) while 조건 start < end
3) 이분탐색 mid = (start + end) // 2
4) 통과한 사람 수 += mid//time , for time in times
5) 통과한 사람 수 >= n end = mid, 통과한 사람 수 < n start = mid + 1

# comment
이분탐색인걸 알 면 쉽지만 그렇지 않은 경우 풀기 짱 어렵고 시간만 버릴 가능성이 큼

# ======================================================================================== #

# 62048 멀쩡한 사각형 math.gcd
# keyword
직사각형 종이, 누가 잘라둠, 정사각형 개수

# description
알고리즘보단 수학문제
width, height의 최대공약수를 각각 나눠서 잘 구하면 댐
answer = w * h - ((w_ + h_ - 1) * (w / w_))

# comment
뭐.. 센스있음 풀겠지

# ======================================================================================== #

# 81302 거리두기 확인 걍 구현문제
# keyword
코로나, 거리두기, 대기실, 파티션

# description
하라는대로 잘 수행하면 풀리긴 함 근데 그게 어려웡.. 복잡행..

# comment
다시 풀기 싫은 스타일

# ======================================================================================== #

# 42627 디스크 컨트롤러 최소힙 heapq.heappush(heap, (t, s)) heapq.heappop(heap)
# keyword
하드디스크, 디스크 컨트롤러, 가로축 막대 그래프 그려져있음

# description
일단 jobs sorting jobs.sort()
최소힙을 만들건데, 작업 소요시간으로 만들어야 하니까 jobs에는 (s,t)로 들어있지만,
heap에는 (t,s)로 넣어줘야함 jobs에서 튀어나온 job은 s,t임
heap에 넣을 조건은, 이전시간(last)과 현재시간(time)으로 제한

for s, t in jobs:
	if last < s <= time:
		# 작업 소요시간으로 min heap을 만들기 위해 (t, s) 푸시
		heapq.heappush(heap, (t, s))
# 바로 수행할 수 있는 작업이 있는 경우 이전시간은 현재시간이 되고
# 현재 시간은 이전시간 + 소요시간이 된다.
if len(heap) > 0:
	count += 1
	last = time
	term, start = heapq.heappop(heap)
	time += term
	# 요청부터 종료까지 걸린 시간의 평균이 답이니까
	answer += time - start
# 바로 수행할 수 있는 작업이 없는 경우
else:
	time += 1
	
	
# comment

# ======================================================================================== #

# 118666 성격유형 검사하기 zip for문 두개, collections.defaultdict, get(val,default)
# keyword
성격유형 검사지

# description
걍 하라는대로 하면 되는데, for문 2개 동시에 돌리는 법이랑, dic에 없는 값 default 처리
방식 공부
1) temp = collections.defaultdict(int) 하면 0(int)로 초기화된 instance가진다.
이렇게 하면 temp["unvalid_key"] 해도 0(default 값)이 return 된다.
2) 내가 잘 쓰는 temp = {} 하고 for로 key value 넣어주는 방식도
temp.get("unvalid_key")을 하면 None을 return 하고 
temp.get("unvalid_key",0)을 하면 0을 return 한다.
3) survey,choices 의 값을 동시에 for문 돌려야 하는데, for i, j in zip(survey, choices):
쓰면 된다.

# comment
쉬운듯 어려워서 못 풀진 않겠지만, 오래걸릴 순 있겠다.

# ======================================================================================== #

# 42861 섬 연결하기 greedy, union-find algorithm, Kruskal algorithm, disjoint set
# keyword
섬 사이에 다리를 연결하는 비용 / 모든 섬이 통행 가능

# description
kruskal algorithm node와 node 사이 선을 간선이라 하는데, 간선들을 비용을 오름차순 정렬하고
cycle이 형성되는 애들을 제외하고 연결 시키면 최소비용을 구할 수 있다.

그럼 cycle 형성을 어캐 판단하냐? union-find algorithm 사용해야 함
그게 뭐냐... 어려워잉..
1) n개의 node면 root = list(range(n))
2) 
def union(x, y, root):
	x, y = find(x, root), find(y, root)
	root[y] = x
def find(index, root):
	if index == root[index]:
		return index
	else:
		root[index] = find(root[index], root)
		return root[index]

3) unionfind 준비 했으면 아래처럼 cost를 오름차순으로 정리한 값들을 돌려주면 된다.
cycle 형성은 find로 판단 cycle 형성이 되지 않으면 union

for cost in costs:
	if find(cost[0], root) == find(cost[1], root):
		# cycle이 형성되면 그 node를 route에 추가하지 않는다.
		# 예를들어 cost[0]의 꼭대기에 0이 있는데
		# cose[1]의 꼭대기에도 0이 있다면 얘내 둘이 연결되면 cycle이 생김
		continue
	union(cost[0], cost[1], root)
	# route.append((cost[0], cost[1]))
	answer += cost[2]


# comment
이건 뭐.. 풀면 기적일듯

# ======================================================================================== #

# 12978 배달 dijkstra algorithm, inf 초기화, 2차원 배열 만들기, heapq.heappush(heap, [0, 1])
heapq.heappop(heap)
# keyword
N개의 마을로 이루어진 나라, 양방향통행 도로, 음식 배달 K시간 이내

# description
1) 초기화
1-1) dist(최소거리 갱신 정보)는 inf 로 초기화 
단, 마을이 1부터니까 0~5로 만들고 0번 안 쓸거임
dist = [float("inf")] * (N + 1) 
dist[1] = 0  # 1번은 자기자신이니까 거리 0
1-2) adj 2차원 배열 만들기 adj는 지도에서 주어진 거리, 노드가 기록된다.
adj = [[] for _ in ragne(N + 1)]
for r in road:
	# 양방향 통행이 가능하므로 두쪽 다 넣어줌
	adj[r[0]].append([r[2], r[1]]) # r[0]번 마을은 r[1]번 마을과 r[2]의 거리
	adj[r[1]].append([r[2], r[0]]) # r[1]번 마을은 r[0]번 마을과 r[2]의 거리

def dijkstra(dist, adj):
    # 출발노드를 기준으로 각 노드들의 최소비용 탐색
    heap = [[0, 1]] # 시작 거리와 노드
	# heap에 뭐가 있으면 반복
    while heap:
        cost, node = heapq.heappop(heap)
        for c, n in adj[node]:
			# adj에는 지도에 박힌 값들이 넣어져있으므로
			# 이 시점까지 확인했던 최소비용 값 dist와 heap에 박혀있던 값 + 현재 비용 c
			# 를 비교해서 작으면 최소비용 값 dist를 cost+c로 갱신
			# heap에는 그 최소비용과 노드를 저장해서 다시 확인 해 볼 수 있게 한다.
            if cost + c < dist[n]:
                dist[n] = cost + c
                heapq.heappush(heap, [cost + c, n])
# comment
참고로 꼭 최소힙을 사용 할 필요는 없고 deque나 list를 사용해도 전혀 문제 없음

# ======================================================================================== #

# 12936 줄 서는 방법 math.factorial(n)
# keyword
일렬로 줄을 선다. 나열하는 방법, 20!

# description
이런게 은근 자주 나오는데.. n번째 값이 n-1 번째 값으로 구성되는 뭐 그런 문제
//, % 연산은 0을 return 시키는데 사람은 0이 아니고 1부터 시작이니까 아래처럼 정리
n = n - 1
k = k - 1
은근 이게 잘 안되서 오래 걸렸음..!!

4 factorial을 sorting 한다고 하면 아래와 같이 나올텐데..
[(1, 2, 3, 4), (1, 2, 4, 3), (1, 3, 2, 4), (1, 3, 4, 2), (1, 4, 2, 3), (1, 4, 3, 2), 
(2, 1, 3, 4), (2, 1, 4, 3), (2, 3, 1, 4), (2, 3, 4, 1), (2, 4, 1, 3), (2, 4, 3, 1), 
(3, 1, 2, 4), (3, 1, 4, 2), (3, 2, 1, 4), (3, 2, 4, 1), (3, 4, 1, 2), (3, 4, 2, 1), 
(4, 1, 2, 3), (4, 1, 3, 2), (4, 2, 1, 3), (4, 2, 3, 1), (4, 3, 1, 2), (4, 3, 2, 1)]

예를들어 4명이 줄 서는데 11번째 방법을 구하고 싶다라..
그러면 11//3!을 해서 4!의 몇 번 째 줄인지 확인 -> 11//6 = 1
그리고 나머지가 몇인지도 확인 11%6 = 5
다시 그 나머지를 5//2! 해서 3!의 몇 번 째 줄인지 확인 -> 5//2 = 2
반복...
그럼 그 값들이 아래와 같다.
[(1, 4), (2, 0), (0, 0)]

사람을 쭉 세워놓고 info의 value를 넣어준다.
단, 세운 사람은 remove로 없애줘야 한 번 세운 사람이 빠짐 ㅋ 이것도 뭔가 술술 풀렸는데,
다시 하라고 하면 헷갈릴 거 같긴 함
temp = list(range(1, n + 1))
for i, v in enumerate(info):
	answer.append(temp[v[0]])
	temp.remove(temp[v[0]])

# comment
뭔가 쉬웠는데, 초기화가 어려웠고 마지막에 remove 하는 부분이 왜케 쉽게 풀렸는지 모르겠음
다시 하라면 못할거 같음

# ======================================================================================== #

# 49189 가장 먼 노드 graph 만들기, visited만들기, que 사용하기, count
# keyword
그래프, "1번 노드부터" 가장 멀리 떨어진

# description
graph의 행은 노드번호, 그 행의 요소들은 연결된 애들
que는 1번이 들어있게 초기화 한 뒤 graph의 node 행에 있는 애들을 for문 돌림
for loop에서 if visited[i] == 0: 일 때 que에 i를 넣고 visited[i] = visited[node] + 1 해줌
answer = visited.count(max(visited))

# comment
어렵다어려워..

# ======================================================================================== #

# 77485 행렬 테두리 회전하기 걍 노가다로 고고
# keyword
회전시키기, 좌우 끝이 쿼리로 주어짐

# description
먼저 어레이를 만들고
아래처럼 그대로 구현하고 그걸 x1,x2/ y1,y2/ x2,x1/ y2,y1 에 대해 반복한다.
for k in range(x1 - 1, x2 - 1):
	temp_val = array[k + 1][y1 - 1]
	array[k][y1 - 1] = temp_val
	minimum_ = min(minimum_, temp_val)

# comment
구현문젠데 range -1 써 주는거랑 4번 각각 min 때려주는게 핵심

# ======================================================================================== #

# 67257 수식 최대화 itertools.permutations, isdigit
# keyword
우승자 상금, + - *
# description
oplist = ["+", "-", "*"]
oplist = list(permutations(op, 3)) 로 일단 모든 case를 다 해볼거임

주어진 문자열을 ['100', '-', '200', ' * ', '300', '-', '500', '+', '20']로 나누는 법
1) regex... 못하게써
2) for랑 isdigit 사용하기
temp = ""
arry = []
for i in "100-200*300-500+20":
    if i.isdigit():
        temp = temp + i
    else:
        arry.append(temp)
        arry.append(i)
        temp = ""

계산 함수 하나 만들고
def operation(num1, num2, op):
    if op == "+":
        return str(int(num1) + int(num2))
    if op == "-":
        return str(int(num1) - int(num2))
    if op == "*":
        return str(int(num1) * int(num2))
		
위에서 만들었던 oplist 내의 op를 돌릴건데... 이게 우선순위 적용을 해야하니까
stack 하나랑 만들었던 arry 하나 돌려줘야함
while arry: 하면서 arr.pop을 한다. 그 값이 숫자면 stack에 저장하고
값이 연산자면 stack에 있던거 pop 하고 arry에서 한 번 더 pop해서 그 연산자를 써줌

# comment
stack 하나 더 판다는 생각이 좀 어렵다

# ======================================================================================== #

# 60058 괄호 변환 문제가 잘 써져있어서 구현문제임 collections.deque
# keyword

# description
stack잘 만들고 하라는대로 하면 되긴 하는데..

# comment

# ======================================================================================== #

# 12971 스티커 모으기(2) dp문제
# keyword
원형 스티커, 하나 떼면 옆에 두 개 날아감

# description
0) dp부터 생성 
dp = [0] * len(sticker)
if temp == 0:
	dp[0] = sticker[0]
else:
	dp[1] = sticker[1]
	
1) 0번 부터 떼는지 1번부터 떼는지에 따라서 for문 돌릴 range가 달라짐 이게 어려움
1-1) range(1,len(sticker)-1) (1 시작, 끝-2 까지)
1-2) range(2,len(sticker)) (2 시작, 끝-1 까지)

2) dp 구현 하는법 아 어렵다... 외울까 걍..
dp[i] = max(sticker[i] + dp[i-2], dp[i-1])

# comment
dp구현을 어캐 할것인가가 핵심..
아래 빼먹지 마소잉
1) if len(sticker) <= 3:
	  return max(sticker)
2) answer = ax(dp[-2], dp[-1])
# ======================================================================================== #

# 131704 택배상자 filo
# keyword
택배상자, 트럭, 순서, 컨테이너 벨트

# description
indexing error가 자꾸 뜨는데 pop 쓰다가 while이 깨져서 그럼
while filo[-1] == order[0]: 이 코드를
while filo and filo[-1] == order[0]: 이걸로 바꾸면 안그럼
참고로 filo가 and 앞에 있어야지 뒤에 있으면 에러뜸

# comment
뭔가 나올거 같기도 허고

# ======================================================================================== #

# 1778870 연속된 두 부분수열의 합, two pointer
# keyword
비내림차순, sequence

# description
일단 sequence 요소 자체가 k보다 크면 오름차순 이므로 end idx가 정해지고,
요소가 k면 그게 1칸짜리 정답이므로 그 케이스 먼저 확인

for i in range(len(sequence)):
	if sequence[i] > key:
		end_index = i
	elif sequence[i] == key:
		return [i,i]

투포인터 구현
while l<=r and r<len(sequence):

누적합을 쓰든 dp를 쓰든 해서 구한 temp sum을 사용
if l == r:
	r = r + 1
elif temp_sum > k:
	l = l + 1
else:
	r = r + 1

# comment
저기 l,r 증가시키는걸 못풀었음... ㅠㅠ 빡대갈스
# ======================================================================================== #

# 12899 124나라 재귀, divmod 
# keyword
124나라 1,2,4진법

# description
암기해도 될듯
0이 빠진 진법이라 n-1

1) 3자 이하
if n<= 3:
	return "124"[n-1]
	
2) 재귀
else:
	n_div,n_mod = divmod(n-1,3)
	solutioni(n_div)+"124"[n_mod]
	
# comment
외우자외워
# ======================================================================================== #

# 68645 삼각 달팽이, 구현문제
# keyword
삼각형으로 반시계방행 달팽이 채우기

# description
일단 1~n의 낌지성1@
누적합(피보나치) 까지 삼각형으로 채워야 하고
잘 정리해서 왼쪽 아래쪽 오른쪽 삼각형 채우기 실행

# comment

# ======================================================================================== #

# 42883 큰 수 만들기, greedy
# keyword
k개의 수 제거

# description
제일 큰 수만 남기고 answer를 계속 pop 해 주면 된다.
1) number를 쭉 탐색하면서 answer에 하나 씩 넣어줌
2) k>0이면 answer[-1]과 number를 비교해서 answer.pop을 해 준다.
3) pop할 때 마다 k = k -1

# comment

# ======================================================================================== #

# 132265 롤케이크 자르기, set.add(), collections.Counter(), del dic[v]
# keyword
롤케이크, 토핑, 공평하게, 종류

# description
철수 = set(), 동생 = collections.Counter(topping) 이 핵심
이대로 동생 -> 철수로 하나 씩 빼면서 진행시키고
동생 Counter에 0이 되면 key를 지워줌 어캐? 이로케 ~ del brother[key]

# comment
del dict[key] 를 몰랐네 후쉬발

+@) 몇 가지
1) key 있는지 보려면 if dic[key]: 는 안되고 if key in dic: 로 해야함
2) dic에 list넣고 append 하려면 dic[key].append 는 안되고 dic[key] = dic[key] + [x]
로 해야함 +를 해야하는게 좀 특이함;;
3) 초기화 할 때부터 하려면 dic[key] = dic.get(key, []) + [x]
# ======================================================================================== #

# 43164 여행경로 
# keyword
항공권, "ICN"

# description
1) dict type의 그래프 생성
for (start, end) in tickets:
	routes[start] = routes.get(start, []) + [end]  
2) 알파벳 순서 정렬
for r in routes.keys():
	routes[r].sort(reverse=True)
3) path
저 if else문이 핵심이고 path는 목적지 ~ 출발지로 만들어야 함
왜냐면 반대의 경우 분기를 만족시키기 힘등게
글서 먼저 끝에 닿을 때 까지 else로 들어가서 목적지까지는 채우고
top이 route에 없거나 해당 route가 비어있는 경우 path에 넣어준다.
while st:
	top = st[-1]
	if top not in routes or len(routes[top]) == 0:
		path.append(st.pop())
	else:
		st.append(routes[top].pop())
# comment
쉬워보이지만, TC를 다 만족하기가 좀 힘들었음
# ======================================================================================== #

# 154540 무인도 여행 dfs, dirs, visited
# keyword
무인도, 식량

# description
dirs = ((-1, 0), (1, 0), (0, -1), (0, 1)) 
for dr,dc in dirs:
	if 0 <= temp_r+dr < row and 0<= temp_c+dc < column:
으로 하면 왼오위아래를 탐색할 수 있음

# comment
dir과 0<= temp+dir < max 사용하기
# ======================================================================================== #

# 12979 기지국설치
# keyword
아파트, 기지국, 4g 5g, 전파 도달거리

# description
이게 아마 dp나 아파트 정보를 list로 만들면 길이 초과가 날꺼임
어디에 뭐가 있는지는 문제에서 중요한게 아니니까, n이라는 숫자와 전파 도달한 아파트 개수
를 기준으로 풀면 댐

먼저 미리 설치되어있던 곳 까지 몇개 들어가는지 다 구하고
끝나면 남은 아파트들에 몇 개 들어가는지 구하면 댈듯..

# comment

# ======================================================================================== #

# 42579 베스트앨범 dict 정렬 하기
# keyword
스트리밍 사이트, 장르별 재생, 베스트 앨범

# description
items() 하면 key,value가 나오니께 value로 정렬하믄 댐
dict = sorted(dict.items(), key=lambda x: x[1], reverse=1)

# comment

# ======================================================================================== #

# 154538 숫자변환하기, dynamic prgramming
# keyword
자연수 x를 y로 변환, 사용할 수 있는 연산 +n, *2, *3

# description
일단 dist = [0] * 1000001 를 하나 만듬

0 <= x + n <= 1000000, dist[x + n] == 0 만족 시 아래처럼 해 줌
dist[x + n] = dist[x] + 1
dist[x * 2] = dist[x] + 1
dist[x * 3] = dist[x] + 1
그러면 dist 인덱스에 있는 숫자가 거까지 오는데 걸린 계산 수

# comment

# ======================================================================================== #

# 42839 소수 찾기, itertools.permutations
# keyword
숫자가 적힌 종이 조각, 소수 만들기

# description
permutations으로 일단 돌려주고 그 케이스들을 다 확인하면 댐

# comment

# ======================================================================================== #

# 42746 가장 큰 수 map, 문자열 비교 
# keyword
정수를 이어 붙여 만들 수 있는 가장 큰 수

# description
numbers = map(str,numbers) -> for i in numbers: str(i) 랑 동일한 효과

numbers.sort(key=lambda x: x*3, reverse = True)
x*3을 쓴 이유는 numbers의 원소가 1000이하라는 문제 조건이 있었기 때문

문자열 비교는
["55", "333", "99"]을 소팅하면 앞자리인 5,3,9를 먼저 비교하므로 ['333', '55', '99']로 소팅됨

# comment

# ======================================================================================== #

# 42583 다리를 지나는 트럭
# keyword
트럭, 다리, 무게

# description
cnt로 시간을 계속 1씩 올려줌
crossed, crossing, entrytime 세 가지 정보가 필요함
crossing, entrytime정보를 넣고
entrytime이 존재한다면 entrytime - cnt가 length가 되면 지나간걸로 판단
crossed에 넣는다.

# comment

# ======================================================================================== #

# 12987 숫자게임 오홍
# keyword
숫자게임, 실수로 출전 순서 공개

# description
A,B를 sorting 하고 A가 B보다 크면 B.pop() 작으면 B.popleft()

# comment

# ======================================================================================== #

# 77885 2개이하로다른비트 rfind, int, bin, 진법
# keyword
크고 비트가 1~2개 다른 수 

# description
홀 짝일 때 경우가 다른데, 짝수면 마지막을 1로 바꿔주면 되고 (1만 증가)
bin 쓰면 0b~ 가 되니까 2번부터 사용
홀수면 "0" + bin(number[2:])

rfind : 오른쪽부터 찾아감
binary_num.rfind("0") 하면 우측부터 index 구해 줌

구한 binary text를 int("".join(binary_num),2)
int(txt,진법) 으로 쓰면 댐

# comment
int(txt,진법)
# ======================================================================================== #

# 42884 단속카메라
# keyword
고속도로, 카메라설치

# description
진입 순서로 정렬
제일 먼저 나가는 차보다 늦게 들어오는 차가 있으면 카메라를 설치
if temp_in > pre_out:
	answer += 1
	pre_out = temp_out
else:
	#
	pre_out = min(pre_out, temp_out)
# comment

# ======================================================================================== #

# 12900 2xn 타일링
# keyword
직사각형 모양의 타일 채우기

# description
피보나치 문제고 점화식을 세우면 된다.
a = 1, b = 1
c = a + b
a = b
b = c

# comment

# ======================================================================================== #

# 154539 뒤에있는 큰 수
# keyword
자신보다 크면서, 뒤에있는 수

# description
answer를 미리 만들어 두는게 핵심 answer = [-1] * (len(numbers))
stack에 idx를 저장하고 하나씩 조건 만족시 하나씩 빼준다.

for idx, val in enumerate(numbers):
	while stack and numbers[stack[-1]] < val:
		answer[stack.pop()] = val
	stack.append(idx)
# comment

# ======================================================================================== #

# 42898 등굣길
# keyword
폭우로 지역이 물에 잠김, 학교가야댐

# description
이거 경로 구하는거 아래처럼 하는건디..
111
123
136
이거 하고나서 puddle 위치는 다시 0으로 만들어준다. 위에서 계산하고
밑에서 우물 위치는 0으로 바꾸면 댐 만약 가운데가 우물이라면 아래처럼 댐
111
101
112

# comment

# ======================================================================================== #

# 84512 모음사전 완전탐색
# keyword
AEIOU 사전에서 몇 번째인지

# description
5글자니까 걍 다 만들고 index 하면 댐

# comment

# ======================================================================================== #

# 1844 게임 맵 최단거리
# keyword
visited, dir 이용하는문제 근데 visited를 1로 바꾸는게 아니고 이전 위치 +1을 해 줘야 함

# description
if 0 <= temp_x < m and 0 <= temp_y < n:
	# 길이 있는지 확인
	if maps[temp_x][temp_y] == 1:
		# 안가본 길이라면
		if visited[temp_x][temp_y] == -1:
			# 이전 위치에서 +1

# comment

# ======================================================================================== #

# 12913 땅따먹기
# keyword
땅따먹기 같은 열을 반복해서 밟을 수 없음

# description
내 위에꺼를 빼고 계산하기 위해 -1로 처리해 놓고 max값을 내 라인에 더해줌
경로가 중요하니까 전 단계까지의 계산값을 다음 계산에 사용함

temp = land[i - 1][j]
land[i - 1][j] = -1
land[i][j] = land[i][j] + max(land[i - 1])
land[i - 1][j] = temp

# comment

# ======================================================================================== #

# 42584 주식가격
# keyword
초단위 기록 주식가격

# description
얘도 answer 미리 0으로 채워놓고 idx로 접근
prices = collections.deque(prices)
cnt = 0
while prices:
	temp = prices.popleft()
	for i, v in enumerate(prices):
		if temp > v:
			answer[cnt] = i + 1
			break
		else:
			answer[cnt] = i + 1
	cnt = cnt + 1
# comment

# ======================================================================================== #

# 43163 단어변환, zip
# keyword
두개의 단어는 한 알파벳만 바꾸면서 진행 가능

# description
한 알파벳만 다른거 확인하려면 아래처럼 zip을 사용해서 두 단어의 글자 비교 가능
for c, w in zip(current, word):
   if c != w:
		count += 1
# comment
# ======================================================================================== #

# 42626 더 맵게 최소힙 heapq
# keyword
스코빌 지수

# description
최소힙으로 scovile을 만들어주고 그 힙의 최상단이 K보다 작으면 계산을 반복
힙이 비는 경우가 생기면 못 만드는거니까 -1 리턴

# comment
